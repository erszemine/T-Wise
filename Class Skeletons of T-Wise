from abc import ABC, abstractmethod

# Interfaces
class IBirim(ABC):
    @abstractmethod
    def get_ad(self) -> str:
        pass
    
    @abstractmethod
    def get_yetkiler(self) -> list:
        pass

class ICalisan(ABC):
    @abstractmethod
    def get_ad(self) -> str:
        pass
    
    @abstractmethod
    def get_pozisyon(self) -> str:
        pass
    
    @abstractmethod
    def get_fonksiyonlar(self) -> list:
        pass
    
    @abstractmethod
    def get_birim(self) -> IBirim:
        pass

# Birim Sınıfları
class Birim(IBirim):
    def __init__(self, ad: str, yetkiler: list):
        self.ad = ad
        self.yetkiler = yetkiler

class DepoBirim(Birim):
    pass

class LojistikBirim(Birim):
    pass

class GenelMuduruluk(Birim):
    pass

class StokBirim(Birim):
    pass

class MuhasebeBirim(Birim):
    pass

class ITBirim(Birim):
    pass

# Çalışan Sınıfı
class Calisan(ICalisan):
    def __init__(self, ad: str, pozisyon: str, fonksiyonlar: list, birim: IBirim):
        self.ad = ad
        self.pozisyon = pozisyon
        self.fonksiyonlar = fonksiyonlar
        self.birim = birim

# Çalışan Rolleri
class GenelMudur(Calisan):
    pass

class LojistikMuduru(Calisan):
    pass

class DepoYoneticisi(Calisan):
    pass

class StokKontrolUzmani(Calisan):
    pass

class KaliteKontrolUzmani(Calisan):
    pass

class SevkiyatDagitimUzmani(Calisan):
    pass

class DepoOperatoru(Calisan):
    pass

class TedarikPlanlamaUzmani(Calisan):
    pass

class SatınAlmaUzmani(Calisan):
    pass

class ITUzmani(Calisan):
    pass

# Factory Pattern
class CalisanFactory:
    @staticmethod
    def create_calisan(pozisyon: str, ad: str) -> Calisan:
        pass

# Observer Pattern
class Observer(ABC):
    @abstractmethod
    def update(self):
        pass

class StokTakipSubject:
    def __init__(self):
        self.observers = []
    
    def add_observer(self, observer: Observer):
        pass
    
    def remove_observer(self, observer: Observer):
        pass
    
    def notify_observers(self):
        pass

class StokBirimObserver(Observer):
    def update(self):
        pass

class LojistikBirimObserver(Observer):
    def update(self):
        pass

class MuhasebeBirimObserver(Observer):
    def update(self):
        pass
